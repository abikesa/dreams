Traceback (most recent call last):
  File "/Users/apollo/Documents/Chords/myenv/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/apollo/Documents/Chords/myenv/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/apollo/Documents/Chords/myenv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.11/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/apollo/Documents/Chords/myenv/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/apollo/Documents/Chords/myenv/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/apollo/Documents/Chords/myenv/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx

# Define the neural network layers
def define_layers():
    return {
        'Tragedy (Pattern Recognition)': ['Cosmology', 'Geology', 'Biology', 'Ecology', "Symbiotology", 'Teleology'],
        'History (Resources)': ['Resources'],  
        'Epic (Negotiated Identity)': ['Faustian Bargain', 'Islamic Finance'],  
        'Drama (Self vs. Non-Self)': ['Darabah', 'Sharakah', 'Takaful'],  
        "Comedy (Resolution)": ['Cacophony', 'Outside', 'Ukhuwah', 'Inside', 'Symphony']  
    }

# Assign colors to nodes
def assign_colors():
    color_map = {
        'yellow': ['Resources'],  
        'paleturquoise': ['Teleology', 'Islamic Finance', 'Takaful', 'Symphony'],  
        'lightgreen': ["Symbiotology", 'Sharakah', 'Outside', 'Inside', 'Ukhuwah'],  
        'lightsalmon': ['Biology', 'Ecology', 'Faustian Bargain', 'Darabah', 'Cacophony'],
    }
    return {node: color for color, nodes in color_map.items() for node in nodes}

# Define edges
def define_edges():
    return [
        ('Cosmology', 'Resources'),
        ('Geology', 'Resources'),
        ('Biology', 'Resources'),
        ('Ecology', 'Resources'),
        ("Symbiotology", 'Resources'),
        ('Teleology', 'Resources'),
        ('Resources', 'Faustian Bargain'),
        ('Resources', 'Islamic Finance'),
        ('Faustian Bargain', 'Darabah'),
        ('Faustian Bargain', 'Sharakah'),
        ('Faustian Bargain', 'Takaful'),
        ('Islamic Finance', 'Darabah'),
        ('Islamic Finance', 'Sharakah'),
        ('Islamic Finance', 'Takaful'),
        ('Darabah', 'Cacophony'),
        ('Darabah', 'Outside'),
        ('Darabah', 'Ukhuwah'),
        ('Darabah', 'Inside'),
        ('Darabah', 'Symphony'),
        ('Sharakah', 'Cacophony'),
        ('Sharakah', 'Outside'),
        ('Sharakah', 'Ukhuwah'),
        ('Sharakah', 'Inside'),
        ('Sharakah', 'Symphony'),
        ('Takaful', 'Cacophony'),
        ('Takaful', 'Outside'),
        ('Takaful', 'Ukhuwah'),
        ('Takaful', 'Inside'),
        ('Takaful', 'Symphony')
    ]

# Calculate node positions
def calculate_positions(layer, x_offset):
    y_positions = np.linspace(-len(layer) / 2, len(layer) / 2, len(layer))
    return [(x_offset, y) for y in y_positions]

# Create and visualize the neural network graph
def visualize_nn():
    layers = define_layers()
    colors = assign_colors()
    edges = define_edges()

    G = nx.DiGraph()
    pos = {}
    node_colors = []

    # Numbered node labels
    mapping = {}
    counter = 1
    for layer in layers.values():
        for node in layer:
            mapping[node] = f"{counter}. {node}"
            counter += 1

    # Add nodes and positions
    for i, (layer_name, nodes) in enumerate(layers.items()):
        positions = calculate_positions(nodes, x_offset=i * 2)
        for node, position in zip(nodes, positions):
            new_node = mapping[node]
            G.add_node(new_node, layer=layer_name)
            pos[new_node] = position
            node_colors.append(colors.get(node, 'lightgray'))

    # Add edges
    edge_colors = {}
    for source, target in edges:
        if source in mapping and target in mapping:
            new_source = mapping[source]
            new_target = mapping[target]
            G.add_edge(new_source, new_target)
            edge_colors[(new_source, new_target)] = 'lightgrey'

    # Add black highlight edges
    numbered_nodes = list(mapping.values())
    black_edge_list = [
        (numbered_nodes[3], numbered_nodes[6]),   # 4 -> 7
        (numbered_nodes[6], numbered_nodes[8]),   # 7 -> 9
        (numbered_nodes[8], numbered_nodes[10]),  # 9 -> 11
        (numbered_nodes[10], numbered_nodes[12]), # 11 -> 13
        (numbered_nodes[10], numbered_nodes[13]),
        (numbered_nodes[10], numbered_nodes[14]),
        (numbered_nodes[10], numbered_nodes[15]),
        (numbered_nodes[10], numbered_nodes[16])
    ]
    for src, tgt in black_edge_list:
        G.add_edge(src, tgt)
        edge_colors[(src, tgt)] = 'black'

    # Draw the network
    plt.figure(figsize=(12, 8))
    nx.draw(
        G, pos, with_labels=True, node_color=node_colors, 
        edge_color=[edge_colors.get(edge, 'lightgrey') for edge in G.edges],
        node_size=3000, font_size=9, connectionstyle="arc3,rad=0.2"
    )
    plt.title("CG-BEST", fontsize=18)

    # âœ… Save the actual image *after* drawing it
    plt.savefig("figures/cgbest.jpeg", dpi=300, bbox_inches='tight')
    # plt.show()

# Run it
visualize_nn()

------------------


[31m---------------------------------------------------------------------------[39m
[31mFileNotFoundError[39m                         Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 130[39m
[32m    126[39m     plt.savefig([33m"[39m[33mfigures/cgbest.jpeg[39m[33m"[39m, dpi=[32m300[39m, bbox_inches=[33m'[39m[33mtight[39m[33m'[39m)
[32m    127[39m     [38;5;66;03m# plt.show()[39;00m
[32m    128[39m 
[32m    129[39m [38;5;66;03m# Run it[39;00m
[32m--> [39m[32m130[39m [43mvisualize_nn[49m[43m([49m[43m)[49m

[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 126[39m, in [36mvisualize_nn[39m[34m()[39m
[32m    123[39m plt.title([33m"[39m[33mCG-BEST[39m[33m"[39m, fontsize=[32m18[39m)
[32m    125[39m [38;5;66;03m# âœ… Save the actual image *after* drawing it[39;00m
[32m--> [39m[32m126[39m [43mplt[49m[43m.[49m[43msavefig[49m[43m([49m[33;43m"[39;49m[33;43mfigures/cgbest.jpeg[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mdpi[49m[43m=[49m[32;43m300[39;49m[43m,[49m[43m [49m[43mbbox_inches[49m[43m=[49m[33;43m'[39;49m[33;43mtight[39;49m[33;43m'[39;49m[43m)[49m

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/pyplot.py:1243[39m, in [36msavefig[39m[34m(*args, **kwargs)[39m
[32m   1240[39m fig = gcf()
[32m   1241[39m [38;5;66;03m# savefig default implementation has no return, so mypy is unhappy[39;00m
[32m   1242[39m [38;5;66;03m# presumably this is here because subclasses can return?[39;00m
[32m-> [39m[32m1243[39m res = [43mfig[49m[43m.[49m[43msavefig[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m  [38;5;66;03m# type: ignore[func-returns-value][39;00m
[32m   1244[39m fig.canvas.draw_idle()  [38;5;66;03m# Need this if 'transparent=True', to reset colors.[39;00m
[32m   1245[39m [38;5;28;01mreturn[39;00m res

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/figure.py:3490[39m, in [36mFigure.savefig[39m[34m(self, fname, transparent, **kwargs)[39m
[32m   3488[39m     [38;5;28;01mfor[39;00m ax [38;5;129;01min[39;00m [38;5;28mself[39m.axes:
[32m   3489[39m         _recursively_make_axes_transparent(stack, ax)
[32m-> [39m[32m3490[39m [38;5;28;43mself[39;49m[43m.[49m[43mcanvas[49m[43m.[49m[43mprint_figure[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/backend_bases.py:2184[39m, in [36mFigureCanvasBase.print_figure[39m[34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)[39m
[32m   2180[39m [38;5;28;01mtry[39;00m:
[32m   2181[39m     [38;5;66;03m# _get_renderer may change the figure dpi (as vector formats[39;00m
[32m   2182[39m     [38;5;66;03m# force the figure dpi to 72), so we need to set it again here.[39;00m
[32m   2183[39m     [38;5;28;01mwith[39;00m cbook._setattr_cm([38;5;28mself[39m.figure, dpi=dpi):
[32m-> [39m[32m2184[39m         result = [43mprint_method[49m[43m([49m
[32m   2185[39m [43m            [49m[43mfilename[49m[43m,[49m
[32m   2186[39m [43m            [49m[43mfacecolor[49m[43m=[49m[43mfacecolor[49m[43m,[49m
[32m   2187[39m [43m            [49m[43medgecolor[49m[43m=[49m[43medgecolor[49m[43m,[49m
[32m   2188[39m [43m            [49m[43morientation[49m[43m=[49m[43morientation[49m[43m,[49m
[32m   2189[39m [43m            [49m[43mbbox_inches_restore[49m[43m=[49m[43m_bbox_inches_restore[49m[43m,[49m
[32m   2190[39m [43m            [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m   2191[39m [38;5;28;01mfinally[39;00m:
[32m   2192[39m     [38;5;28;01mif[39;00m bbox_inches [38;5;129;01mand[39;00m restore_bbox:

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/backend_bases.py:2040[39m, in [36mFigureCanvasBase._switch_canvas_and_return_print_method.<locals>.<lambda>[39m[34m(*args, **kwargs)[39m
[32m   2036[39m     optional_kws = {  [38;5;66;03m# Passed by print_figure for other renderers.[39;00m
[32m   2037[39m         [33m"[39m[33mdpi[39m[33m"[39m, [33m"[39m[33mfacecolor[39m[33m"[39m, [33m"[39m[33medgecolor[39m[33m"[39m, [33m"[39m[33morientation[39m[33m"[39m,
[32m   2038[39m         [33m"[39m[33mbbox_inches_restore[39m[33m"[39m}
[32m   2039[39m     skip = optional_kws - {*inspect.signature(meth).parameters}
[32m-> [39m[32m2040[39m     print_method = functools.wraps(meth)([38;5;28;01mlambda[39;00m *args, **kwargs: [43mmeth[49m[43m([49m
[32m   2041[39m [43m        [49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43m{[49m[43mk[49m[43m:[49m[43m [49m[43mv[49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mk[49m[43m,[49m[43m [49m[43mv[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mkwargs[49m[43m.[49m[43mitems[49m[43m([49m[43m)[49m[43m [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mk[49m[43m [49m[38;5;129;43;01mnot[39;49;00m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mskip[49m[43m}[49m[43m)[49m)
[32m   2042[39m [38;5;28;01melse[39;00m:  [38;5;66;03m# Let third-parties do as they see fit.[39;00m
[32m   2043[39m     print_method = meth

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/backends/backend_agg.py:498[39m, in [36mFigureCanvasAgg.print_jpg[39m[34m(self, filename_or_obj, metadata, pil_kwargs)[39m
[32m    493[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mprint_jpg[39m([38;5;28mself[39m, filename_or_obj, *, metadata=[38;5;28;01mNone[39;00m, pil_kwargs=[38;5;28;01mNone[39;00m):
[32m    494[39m     [38;5;66;03m# savefig() has already applied savefig.facecolor; we now set it to[39;00m
[32m    495[39m     [38;5;66;03m# white to make imsave() blend semi-transparent figures against an[39;00m
[32m    496[39m     [38;5;66;03m# assumed white background.[39;00m
[32m    497[39m     [38;5;28;01mwith[39;00m mpl.rc_context({[33m"[39m[33msavefig.facecolor[39m[33m"[39m: [33m"[39m[33mwhite[39m[33m"[39m}):
[32m--> [39m[32m498[39m         [38;5;28;43mself[39;49m[43m.[49m[43m_print_pil[49m[43m([49m[43mfilename_or_obj[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mjpeg[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mpil_kwargs[49m[43m,[49m[43m [49m[43mmetadata[49m[43m)[49m

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/backends/backend_agg.py:430[39m, in [36mFigureCanvasAgg._print_pil[39m[34m(self, filename_or_obj, fmt, pil_kwargs, metadata)[39m
[32m    425[39m [38;5;250m[39m[33;03m"""[39;00m
[32m    426[39m [33;03mDraw the canvas, then save it using `.image.imsave` (to which[39;00m
[32m    427[39m [33;03m*pil_kwargs* and *metadata* are forwarded).[39;00m
[32m    428[39m [33;03m"""[39;00m
[32m    429[39m FigureCanvasAgg.draw([38;5;28mself[39m)
[32m--> [39m[32m430[39m [43mmpl[49m[43m.[49m[43mimage[49m[43m.[49m[43mimsave[49m[43m([49m
[32m    431[39m [43m    [49m[43mfilename_or_obj[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m.[49m[43mbuffer_rgba[49m[43m([49m[43m)[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[43m=[49m[43mfmt[49m[43m,[49m[43m [49m[43morigin[49m[43m=[49m[33;43m"[39;49m[33;43mupper[39;49m[33;43m"[39;49m[43m,[49m
[32m    432[39m [43m    [49m[43mdpi[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43mfigure[49m[43m.[49m[43mdpi[49m[43m,[49m[43m [49m[43mmetadata[49m[43m=[49m[43mmetadata[49m[43m,[49m[43m [49m[43mpil_kwargs[49m[43m=[49m[43mpil_kwargs[49m[43m)[49m

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/matplotlib/image.py:1644[39m, in [36mimsave[39m[34m(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)[39m
[32m   1642[39m pil_kwargs.setdefault([33m"[39m[33mformat[39m[33m"[39m, [38;5;28mformat[39m)
[32m   1643[39m pil_kwargs.setdefault([33m"[39m[33mdpi[39m[33m"[39m, (dpi, dpi))
[32m-> [39m[32m1644[39m [43mimage[49m[43m.[49m[43msave[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mpil_kwargs[49m[43m)[49m

[36mFile [39m[32m~/Documents/Chords/myenv/lib/python3.11/site-packages/PIL/Image.py:2591[39m, in [36mImage.save[39m[34m(self, fp, format, **params)[39m
[32m   2589[39m         fp = builtins.open(filename, [33m"[39m[33mr+b[39m[33m"[39m)
[32m   2590[39m     [38;5;28;01melse[39;00m:
[32m-> [39m[32m2591[39m         fp = [43mbuiltins[49m[43m.[49m[43mopen[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mw+b[39;49m[33;43m"[39;49m[43m)[49m
[32m   2592[39m [38;5;28;01melse[39;00m:
[32m   2593[39m     fp = cast(IO[[38;5;28mbytes[39m], fp)

[31mFileNotFoundError[39m: [Errno 2] No such file or directory: 'figures/cgbest.jpeg'

